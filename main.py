import sys
import traceback
import os
import telebot
import collections
from flask import Flask, request
from telebot import *
import re
import locale
import psycopg2
import time
import datetime
from datetime import datetime, timedelta


connection = psycopg2.connect(
user="iwannakms",
password="iwannakms",
host="localhost",
port="5432",
database="tezbus_db"
)

cursor = connection.cursor()
# mycursor = mydb.cursor()



TOKEN = "1794881977:AAFtVmJ2etRkwrRK1KxYzc_AOcIywuHodyU"
APP_URL = f"https://tezbusbot.herokuapp.com/"
bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)


print("Started...")


user_data = collections.defaultdict(dict)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('/kettik')
    user_data[message.chat.id]['id'] = message.chat.id
    bot.send_message(message.chat.id, "–±–æ—Ç TezBus –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!")
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /kettik –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)
    print(message.chat.id)


#–û–ë–†–ê–ë–û–¢–ö–ê –†–û–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@bot.message_handler(commands=['kettik'])
def get_user_role(message):
    bot.send_message(message.chat.id, 'üöó')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('üöó–í–æ–¥–∏—Ç–µ–ª—å', 'üíÅ–ü–∞—Å—Å–∞–∂–∏—Ä')
    bot.send_message(message.chat.id, "–ö—Ç–æ –≤—ã?", reply_markup=markup)

    bot.register_next_step_handler(message, post_user_role)


@bot.message_handler(content_types=['text'])
def post_user_role(message):
    if message.text.lower()[1:] == '–≤–æ–¥–∏—Ç–µ–ª—å' or message.text.lower()[1:] == '–ø–∞—Å—Å–∞–∂–∏—Ä':
        user_data[message.chat.id]['role'] = message.text[1:]
        return get_start_point(message) #–ü–ï–†–ï–•–û–î–ò–ú –í –í–í–û–î–£ –ú–ï–°–¢–ê –ù–ê–ß–ê–õ–ê –ü–û–ï–ó–î–ö–ò
    else:
        bot.send_message(message.chat.id, '‚ùå–û–®–ò–ë–ö–ê!‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
        return get_user_role(message) #–ó–ê–ù–û–í–û –ü–ï–†–ï–•–û–î–ò–ú –ö –í–í–û–î–£ –†–û–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

@server.route('/' + TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '!', 200


@server.route('/')
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    return '!', 200

def reinput_user_role(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ä–æ–ª—å':
        return get_user_role(message)

    return post_start_point(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–°–¢–ê –ù–ê–ß–ê–õ–ê –ü–û–ï–ó–î–ö–ò
def get_start_point(message):
    start_point_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_point_markup.add('‚Ü©Ô∏è–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ä–æ–ª—å')
    bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏(–ì–æ—Ä–æ–¥ –∏–ª–∏ –°–µ–ª–æ)', reply_markup=start_point_markup)
    bot.register_next_step_handler(message, reinput_user_role)


def post_start_point(message):
    user_data[message.chat.id]['start_point'] = re.sub(r"\d+", "", message.text, flags=re.UNICODE)
    return get_end_point(message)


def reinput_start_point(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –º–µ—Å—Ç–æ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏':
        return get_start_point(message)

    return post_end_point(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–°–¢–ê –ö–û–ù–¶–ê –ü–û–ï–ó–î–ö–ò
def get_end_point(message):
    end_pont_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    end_pont_markup.add('‚Ü©Ô∏è–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –º–µ—Å—Ç–æ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏')
    bot.send_message(message.chat.id, 'üìå–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∫–æ–Ω—Ü–∞ –ø–æ–µ–∑–¥–∫–∏(–ì–æ—Ä–æ–¥ –∏–ª–∏ –°–µ–ª–æ)', reply_markup=end_pont_markup)
    bot.register_next_step_handler(message, reinput_start_point)


def post_end_point(message):
    if user_data[message.chat.id]['start_point'].lower() != message.text.lower():
        user_data[message.chat.id]['end_point'] = re.sub(r"\d+", "", message.text, flags=re.UNICODE)
    else:
        bot.send_message(message.chat.id, '‚ùå–û–®–ò–ë–ö–ê!‚ùå –ú–µ—Å—Ç–æ –∫–æ–Ω—Ü–∞ –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ, —á—Ç–æ –∏ –º–µ—Å—Ç–æ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
        return get_end_point(message)

    return get_date_of_travel(message)


def reinput_end_point(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –º–µ—Å—Ç–æ –∫–æ–Ω—Ü–∞ –ø–æ–µ–∑–¥–∫–∏':
        return get_end_point(message)

    return post_date_of_travel(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´ –ü–û–ï–ó–î–ö–ò
def get_date_of_travel(message):
    date_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    date_markup.add('üîõ–°–µ–≥–æ–¥–Ω—è', 'üîú–ó–∞–≤—Ç—Ä–∞', '‚Ü©Ô∏è–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –º–µ—Å—Ç–æ –∫–æ–Ω—Ü–∞ –ø–æ–µ–∑–¥–∫–∏')
    bot.send_message(message.chat.id, '–í–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏', reply_markup=date_markup)
    bot.register_next_step_handler(message, reinput_end_point)


def post_date_of_travel(message):

    today = datetime.today()
    tomorrow = today + timedelta(days=1)

    if message.text.lower()[1:] == '—Å–µ–≥–æ–¥–Ω—è':
        user_data[message.chat.id]['date_of_travel1'] = today.strftime('%d.%m.') + " ( –°–µ–≥–æ–¥–Ω—è )"
        user_data[message.chat.id]['date_of_travel'] = user_data[message.chat.id]['date_of_travel1']
        user_data[message.chat.id]['date_of_travel'] = today.strftime('%Y-%m-%d')

    else:
        user_data[message.chat.id]['date_of_travel1'] = tomorrow.strftime('%d.%m.') + " ( –ó–∞–≤—Ç—Ä–∞ )"
        user_data[message.chat.id]['date_of_travel'] = user_data[message.chat.id]['date_of_travel1']
        user_data[message.chat.id]['date_of_travel'] = tomorrow.strftime('%Y-%m-%d')

    return get_time_of_travel(message)



def reinput_date_of_travel(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏':
        return get_date_of_travel(message)

    return post_time_of_travel(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –í–†–ï–ú–ï–ù–ò –ü–û–ï–ó–î–ö–ò
def get_time_of_travel(message):
    time_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    time_markup.add('‚Ü©Ô∏è–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏')
    bot.send_message(message.chat.id, 'üï∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏üï∞', reply_markup=time_markup)
    bot.register_next_step_handler(message, reinput_date_of_travel)


def post_time_of_travel(message):
    user_data[message.chat.id]['time_of_travel'] = message.text
    return get_type_of_transport(message)


def reinput_time_of_travel(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏':
        return get_date_of_travel(message)

    return post_type_of_transport(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –¢–ò–ü–ê –¢–†–ê–ù–°–ü–û–†–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
def get_type_of_transport(message):
    type_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if user_data[message.chat.id]['role'].lower() == '–ø–∞—Å—Å–∞–∂–∏—Ä' and user_data[message.chat.id]['start_point'].lower() == '–±–∏—à–∫–µ–∫' and user_data[message.chat.id]['end_point'].lower() == '–±–∞–ª—ã–∫—á—ã' or user_data[message.chat.id]['end_point'].lower() == '—Ä—ã–±–∞—á—å–µ':
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', 'üöÜ–ø–æ–µ–∑–¥', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')
    elif user_data[message.chat.id]['role'].lower() == '–ø–∞—Å—Å–∞–∂–∏—Ä' and user_data[message.chat.id]['start_point'].lower() == '–±–∏—à–∫–µ–∫' and user_data[message.chat.id]['end_point'].lower() == '—Ç–æ–∫–º–æ–∫':
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', 'üöÜ–ø–æ–µ–∑–¥', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')
    elif user_data[message.chat.id]['role'].lower() == '–ø–∞—Å—Å–∞–∂–∏—Ä' and user_data[message.chat.id]['start_point'].lower() == '–±–∏—à–∫–µ–∫' and user_data[message.chat.id]['end_point'].lower() == '–∫–∞–∏–Ω–¥—ã' or user_data[message.chat.id]['end_point'].lower() == '–∫–∞–∏“£–¥—ã':
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', 'üöÜ–ø–æ–µ–∑–¥', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')

    elif user_data[message.chat.id]['role'].lower() == '–ø–∞—Å—Å–∞–∂–∏—Ä' and user_data[message.chat.id]['start_point'].lower() == '–±–∞–ª—ã–∫—á—ã' or user_data[message.chat.id]['start_point'].lower() == '–±–∞–ª—ã–∫—á–∏' or user_data[message.chat.id]['start_point'].lower() == '—Ä—ã–±–∞—á—å–µ' and user_data[message.chat.id]['end_point'].lower() == '–±–∏—à–∫–µ–∫':
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', 'üöÜ–ø–æ–µ–∑–¥', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')
    elif user_data[message.chat.id]['role'].lower() == '–ø–∞—Å—Å–∞–∂–∏—Ä' and user_data[message.chat.id]['start_point'].lower() == '—Ç–æ–∫–º–æ–∫' and user_data[message.chat.id]['end_point'].lower() == '–±–∏—à–∫–µ–∫':
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', 'üöÜ–ø–æ–µ–∑–¥', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')
    elif user_data[message.chat.id]['role'].lower() == '–ø–∞—Å—Å–∞–∂–∏—Ä' and user_data[message.chat.id]['start_point'].lower() == '–∫–∞–∏–Ω–¥—ã' or user_data[message.chat.id]['start_point'].lower() == '–∫–∞–∏“£–¥—ã' and user_data[message.chat.id]['end_point'].lower() == '–±–∏—à–∫–µ–∫':
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', 'üöÜ–ø–æ–µ–∑–¥', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')

    else:
        type_markup.add('üöò–º–∞—à–∏–Ω–∞', 'üöç–∞–≤—Ç–æ–±—É—Å', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏')

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', reply_markup=type_markup)
    bot.register_next_step_handler(message, reinput_time_of_travel)


def post_type_of_transport(message):
    if user_data[message.chat.id]['role'].lower == '–≤–æ–¥–∏—Ç–µ–ª—å':
        if message.text.lower()[1:] == '–º–∞—à–∏–Ω–∞' or message.text.lower()[1:] == '–∞–≤—Ç–æ–±—É—Å':
            user_data[message.chat.id]['type_of_transport'] = message.text[1:]
            return get_number_of_seats(message)
        else:
            bot.send_message(message.chat.id, '‚ùå–û–®–ò–ë–ö–ê!‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
            return get_type_of_transport(message)
    else:
        if message.text.lower()[1:] == '–º–∞—à–∏–Ω–∞' or message.text.lower()[1:] == '–∞–≤—Ç–æ–±—É—Å' or message.text.lower()[1:] == '–ø–æ–µ–∑–¥':
            user_data[message.chat.id]['type_of_transport'] = message.text[1:]
            return get_number_of_seats(message)
        else:
            bot.send_message(message.chat.id, '‚ùå–û–®–ò–ë–ö–ê!‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
            return get_type_of_transport(message)


def reinput_type_of_transport(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞':
        return get_type_of_transport(message)

    return post_number_of_seats(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í –ú–ï–°–¢
def get_number_of_seats(message):
    seats_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    seats_markup.add('1', '2', '3', '4', '5', '6', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
    bot.send_message(message.chat.id, 'üí∫–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç.', reply_markup=seats_markup)
    bot.register_next_step_handler(message, reinput_type_of_transport)


def post_number_of_seats(message):
    if message.text.isdigit():
        user_data[message.chat.id]['number_of_seats'] = int(message.text)
        return get_price_of_travel(message)
    else:
        bot.send_message(message.chat.id, '‚ùå–û–®–ò–ë–ö–ê!‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
        return get_number_of_seats(message)


def reinput_number_of_seats(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç':
        return get_number_of_seats(message)

    return post_price_of_travel(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –¶–ï–ù–´ –ü–û–ï–ó–î–ö–ò
def get_price_of_travel(message):
    price_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    price_markup.add('‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç')
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏ —Å —á–µ–ª–æ–≤–µ–∫–∞ (—Å–æ–º).', reply_markup=price_markup)
    bot.register_next_step_handler(message, reinput_number_of_seats)


def post_price_of_travel(message):

    if message.text.isdigit():
        user_data[message.chat.id]['price_of_travel'] = message.text
        return get_telephone(message)
    else:
        bot.send_message(message.chat.id, '‚ùå–û–®–ò–ë–ö–ê!‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
        return get_price_of_travel(message)


def reinput_price_of_travel(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏':
        return get_price_of_travel(message)

    return post_telephone(message)


#–û–ë–†–ê–ë–û–¢–ö–ê –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
def get_telephone(message):
    telephone_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    telephone_markup.add('‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏')
    bot.send_message(message.chat.id, 'üìû–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=telephone_markup)
    bot.register_next_step_handler(message, reinput_price_of_travel)


def post_telephone(message):
    user_data[message.chat.id]['telephone'] = message.text
    return final(message)


def reinput_telephone(message):
    if message.text.lower() == '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
        return get_telephone(message)

    return get_result(message)


#–†–ï–ó–£–õ–¨–¢–ê–¢
def final(message):
    final_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    final_markup.add('üìù–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', '‚Ü©Ô∏è–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    bot.send_message(message.chat.id, 'üìù–•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=final_markup)
    bot.register_next_step_handler(message, reinput_telephone)


#–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
def get_result(message):
    result_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    result_markup.add('–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–Ω–µ—Ç')
    bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–∞—à –ø–æ—Å—Ç:')
    bot.send_message(message.chat.id, f"–ß–µ–ª–æ–≤–µ–∫: {user_data[message.chat.id]['role']}\n–ú–µ—Å—Ç–æ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏: {user_data[message.chat.id]['start_point']}\n–ú–µ—Å—Ç–æ –∫–æ–Ω—Ü–∞ –ø–æ–µ–∑–¥–∫–∏: {user_data[message.chat.id]['end_point']}\n–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {user_data[message.chat.id]['date_of_travel1']}\n–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {user_data[message.chat.id]['time_of_travel']}\n–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {user_data[message.chat.id]['type_of_transport']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {user_data[message.chat.id]['number_of_seats']}\n–¶–∞–Ω–∞ –ø–æ–µ–∑–¥–∫–∏: {user_data[message.chat.id]['price_of_travel']}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_data[message.chat.id]['telephone']}")
    if user_data[message.chat.id]['type_of_transport'] =='–ø–æ–µ–∑–¥':
        bot.register_next_step_handler(message, send_result)
    else:
        bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?', reply_markup=result_markup)
        bot.register_next_step_handler(message, send_recommendations)


def send_recommendations(message):
    if message.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        bot.send_message(message.chat.id, "üîé")
        time.sleep(4)
        if user_data[message.chat.id]['role'] == "–ü–∞—Å—Å–∞–∂–∏—Ä":
            sql = "SELECT * FROM drivers WHERE start_point = %s AND end_point = %s AND date_of_travel = %s"
            val = (user_data[message.chat.id]['start_point'], user_data[message.chat.id]['end_point'], user_data[message.chat.id]['date_of_travel'],)
            cursor.execute(sql, val)
            myresult_1 = cursor.fetchall()
            myresult = list(myresult_1)
            for i in myresult:
                t = datetime.strptime(str(i[2]), "%H:%M:%S")
                q = str(i[6])
                today = datetime.today()
                td = today.strftime("%Y-%m-%d")
                if q == td:
                    q = "(–°–µ–≥–æ–¥–Ω—è)"
                else:
                    q = "(–ó–∞–≤—Ç—Ä–∞)"
                w = datetime.strptime(str(i[6]), "%Y-%m-%d")
                res = w.strftime("%d.%m ")+q
                bot.send_message(message.chat.id, '==========\n–ö—Ç–æ: –í–æ–¥–∏—Ç–µ–ª—å\n–û—Ç–∫—É–¥–∞: '+str(i[3])+'\n–ö—É–¥–∞: '+str(i[5])+'\n–ö–æ–≥–¥–∞: '+res+'\n–í—Ä–µ–º—è: '+t.strftime("%H:%M")+'\n–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: '+str(i[1])+'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: '+str(i[9])+'\n–¶–µ–Ω–∞: '+str(i[7])+'\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: '+str(i[8])+'\n==========')
        else:
            sql = "SELECT * FROM passengers WHERE start_point = %s AND end_point = %s AND date_of_travel = %s "
            val = (user_data[message.chat.id]['start_point'], user_data[message.chat.id]['end_point'], user_data[message.chat.id]['date_of_travel'],)
            cursor.execute(sql, val)
            myresult_1 = cursor.fetchall()
            myresult = list(myresult_1)
            for i in myresult:
                t = datetime.strptime(str(i[2]), "%H:%M:%S")
                q = str(i[6])
                today = datetime.today()
                td = today.strftime("%Y-%m-%d")
                if q == td:
                    q = "(–°–µ–≥–æ–¥–Ω—è)"
                else:
                    q = "(–ó–∞–≤—Ç—Ä–∞)"
                w = datetime.strptime(str(i[6]), "%Y-%m-%d")
                res = w.strftime("%d.%m ")+q
                bot.send_message(message.chat.id, '==========\n–ö—Ç–æ: –ü–∞—Å—Å–∞–∂–∏—Ä\n–û—Ç–∫—É–¥–∞: '+str(i[3])+'\n–ö—É–¥–∞: '+str(i[5])+'\n–ö–æ–≥–¥–∞: '+res+'\n–í—Ä–µ–º—è: '+t.strftime("%H:%M")+'\n–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: '+str(i[1])+'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: '+str(i[9])+'\n–¶–µ–Ω–∞: '+str(i[7])+'\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: '+str(i[8])+'\n==========')

    return send_result(message)


#–§–ò–ù–ê–õ
def send_result(message):
    post_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    post_markup.add('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å','–Ω–µ—Ç')
    bot.send_message(message.chat.id,"üìù")
    if user_data[message.chat.id]['type_of_transport'] =='–ø–æ–µ–∑–¥':
        if user_data[message.chat.id]['start_point'].lower() == '–±–∏—à–∫–µ–∫' and user_data[message.chat.id]['end_point'].lower() == '–±–∞–ª—ã–∫—á—ã' \
                or user_data[message.chat.id]['end_point'].lower() == '—Ä—ã–±–∞—á—å–µ' and user_data[message.chat.id]['start_point'].lower() == '–±–∞–ª—ã–∫—á—ã' \
                or user_data[message.chat.id]['start_point'].lower() == '–±–∞–ª—ã–∫—á–∏' or user_data[message.chat.id]['start_point'].lower() == '—Ä—ã–±–∞—á—å–µ' \
                and user_data[message.chat.id]['end_point'].lower() == '–±–∏—à–∫–µ–∫':
            bot.send_message(message.chat.id, """–ü–æ–µ–∑–¥ ‚Äú–ë–∏—à–∫–µ–∫-–†—ã–±–∞—á—å–µ‚Äù, ‚Äú–†—ã–±–∞—á—å–µ-–ë–∏—à–∫–µ–∫‚Äù.
–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–Ω–æ–µ.
–° 15-–∏—é–ª—è –ø–æ 31-–∞–≤–≥—É—Å—Ç–∞ 2021 –≥–æ–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.
–ü–æ–µ–∑–¥ ‚Ññ608 ‚Äú–ë–∏—à–∫–µ–∫ I ‚Äì –†—ã–±–∞—á—å–µ‚Äù –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–ë–∏—à–∫–µ–∫ I¬ª (–ü–∏—à–ø–µ–∫) –≤ 07 —á–∞—Å–æ–≤ 00 –º–∏–Ω—É—Ç, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é –†—ã–±–∞—á—å–µ –≤ 11 —á–∞—Å–æ–≤ 59 –º–∏–Ω—É—Ç.
–ü–æ–µ–∑–¥ ‚Ññ609 ‚Äú–†—ã–±–∞—á—å–µ ‚Äì –ë–∏—à–∫–µ–∫ I¬ª  –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–†—ã–±–∞—á—å–µ¬ª –≤ 17 —á–∞—Å–æ–≤ 15 –º–∏–Ω—É—Ç, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é ¬´–ë–∏—à–∫–µ–∫ I¬ª (–ü–∏—à–ø–µ–∫) –≤ 22 —á–∞—Å–∞ 03 –º–∏–Ω—É—Ç—ã.
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞:
–í–∑—Ä–æ—Å–ª—ã–π –±–∏–ª–µ—Ç: 69 —Å–æ–º
–î–µ—Ç—Å–∫–∏–π –±–∏–ª–µ—Ç: 34 —Å–æ–º  (–æ—Ç 5 –¥–æ 10 –ª–µ—Ç)
 """)
        elif user_data[message.chat.id]['start_point'].lower() == '–±–∏—à–∫–µ–∫' and user_data[message.chat.id]['end_point'].lower() == '—Ç–æ–∫–º–æ–∫' \
                or user_data[message.chat.id]['start_point'].lower() == '—Ç–æ–∫–º–æ–∫' \
                and user_data[message.chat.id]['end_point'].lower() == '–±–∏—à–∫–µ–∫':
            bot.send_message(message.chat.id, """ –ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π  –ø–æ–µ–∑–¥ ¬´–ë–∏—à–∫–µ–∫-–¢–æ–∫–º–æ–∫¬ª, ¬´–¢–æ–∫–º–æ–∫-–ë–∏—à–∫–µ–∫¬ª
–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–Ω–æ–µ.
–ü–æ–µ–∑–¥ ‚Ññ6050 ‚Äú–ë–∏—à–∫–µ–∫ I ‚Äì –¢–æ–∫–º–æ–∫‚Äù –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ‚Äú–ë–∏—à–∫–µ–∫ I¬ª (–ü–∏—à–ø–µ–∫) –≤ 17 —á–∞—Å–æ–≤ 20 –º–∏–Ω—É—Ç, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é –¢–æ–∫–º–æ–∫ –≤ 19 —á–∞—Å–æ–≤ 35 –º–∏–Ω—É—Ç.
–ü–æ–µ–∑–¥ ‚Ññ6051 ‚Äú–¢–æ–∫–º–æ–∫ - –ë–∏—à–∫–µ–∫ I‚Äù –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–¢–æ–∫–º–æ–∫¬ª –≤ 05 —á–∞—Å–æ–≤ 05 –º–∏–Ω—É—Ç, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é ‚Äú–ë–∏—à–∫–µ–∫ I‚Äù (–ü–∏—à–ø–µ–∫) –≤ 07 —á–∞—Å–æ–≤ 21 –º–∏–Ω—É—Ç—É.
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞:
–í–∑—Ä–æ—Å–ª—ã–π –±–∏–ª–µ—Ç: 26 —Å–æ–º
–î–µ—Ç—Å–∫–∏–π –±–∏–ª–µ—Ç: 9 —Å–æ–º  (–æ—Ç 5 –¥–æ 10 –ª–µ—Ç)""")
        elif user_data[message.chat.id]['start_point'].lower() == '–±–∏—à–∫–µ–∫' and user_data[message.chat.id]['end_point'].lower() == '–∫–∞–∏–Ω–¥—ã' \
                or user_data[message.chat.id]['end_point'].lower() == '–∫–∞–∏“£–¥—ã' and user_data[message.chat.id]['start_point'].lower() == '–∫–∞–∏“£–¥—ã' \
                or user_data[message.chat.id]['start_point'].lower() == '–∫–∞–∏–Ω–¥—ã'\
                and user_data[message.chat.id]['end_point'].lower() == '–±–∏—à–∫–µ–∫':
            bot.send_message(message.chat.id,""" –ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π  –ø–æ–µ–∑–¥ ¬´–ë–∏—à–∫–µ–∫-–ö–∞–∏–Ω–¥—ã¬ª, ¬´–ö–∞–∏–Ω–¥—ã-–ë–∏—à–∫–µ–∫¬ª
–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–Ω–æ–µ.
–ü–æ–µ–∑–¥ ‚Ññ6063 ‚Äú–ë–∏—à–∫–µ–∫ II - –ö–∞–∏–Ω–¥—ã‚Äù –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–ë–∏—à–∫–µ–∫ II¬ª –≤ 17 —á–∞—Å–æ–≤ 31 –º–∏–Ω—É—Ç—É, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é ¬´–ö–∞–∏–Ω–¥—ã¬ª –≤ 20 —á–∞—Å–æ–≤ 06 –º–∏–Ω—É—Ç.
–ü–æ–µ–∑–¥ ‚Ññ6064 ‚Äú–ö–∞–∏–Ω–¥—ã - –ë–∏—à–∫–µ–∫ II‚Äù –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–ö–∞–∏–Ω–¥—ã¬ª –≤ 05 —á–∞—Å–æ–≤ 07 –º–∏–Ω—É—Ç, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞  —Å—Ç–∞–Ω—Ü–∏—é ‚Äú–ë–∏—à–∫–µ–∫ II‚Äù –≤ 07 —á–∞—Å–æ–≤ 32 –º–∏–Ω—É—Ç—ã.
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞:
–í–∑—Ä–æ—Å–ª—ã–π –±–∏–ª–µ—Ç: 26 —Å–æ–º
–î–µ—Ç—Å–∫–∏–π –±–∏–ª–µ—Ç: 9 —Å–æ–º  (–æ—Ç 5 –¥–æ 10 –ª–µ—Ç)""")

        markup = types.ReplyKeyboardRemove(selective=False)

        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /kettik –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É?', reply_markup=post_markup)
        bot.register_next_step_handler(message, post_message)

    if user_data[message.chat.id]['role'] =='–í–æ–¥–∏—Ç–µ–ª—å':
        sql = """INSERT INTO drivers (user_id, start_point, end_point, date_of_travel, time_of_travel, type_of_transport, number_of_seats, price_of_travel, telephone) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
        val = (user_data[message.chat.id]['id'], user_data[message.chat.id]['start_point'], user_data[message.chat.id]['end_point'], user_data[message.chat.id]['date_of_travel'], user_data[message.chat.id]['time_of_travel'], user_data[message.chat.id]['type_of_transport'], user_data[message.chat.id]['number_of_seats'], user_data[message.chat.id]['price_of_travel'], user_data[message.chat.id]['telephone'])
        cursor.execute(sql, val)
        connection.commit()
    else:
        sql = """INSERT INTO passengers (user_id, start_point, end_point, date_of_travel, time_of_travel, type_of_transport, number_of_seats, price_of_travel, telephone) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
        val = (user_data[message.chat.id]['id'], user_data[message.chat.id]['start_point'], user_data[message.chat.id]['end_point'], user_data[message.chat.id]['date_of_travel'], user_data[message.chat.id]['time_of_travel'], user_data[message.chat.id]['type_of_transport'], user_data[message.chat.id]['number_of_seats'], user_data[message.chat.id]['price_of_travel'], user_data[message.chat.id]['telephone'])
        cursor.execute(sql, val)
        connection.commit()

def post_message(message):
    if message.text.lower() == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å':
        bot.send_message(-1001561468463, f"–ö—Ç–æ: {user_data[message.chat.id]['role']}\n–û—Ç–∫—É–¥–∞: {user_data[message.chat.id]['start_point']}\n–ö—É–¥–∞: {user_data[message.chat.id]['end_point']}\n–ö–æ–≥–¥–∞: {user_data[message.chat.id]['date_of_travel1']}\n–í—Ä–µ–º—è: {user_data[message.chat.id]['time_of_travel']}\n–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {user_data[message.chat.id]['type_of_transport']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {user_data[message.chat.id]['number_of_seats']}\n–¶–∞–Ω–∞: {user_data[message.chat.id]['price_of_travel']}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_data[message.chat.id]['telephone']}")
        markup = types.ReplyKeyboardRemove(selective=False)
        bot.send_message(message.chat.id, '–í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', reply_markup=markup)
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /kettik –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', reply_markup=markup)
    else:
        markup = types.ReplyKeyboardRemove(selective=False)
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /kettik –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', reply_markup=markup)



bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()

bot.infinity_polling()
